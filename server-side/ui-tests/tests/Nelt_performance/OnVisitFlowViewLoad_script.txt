export interface Step {
    Title: string;
    Resource: string;
    ResourceCreationData: string;
    BaseActivities: string[];
    Mandatory: boolean;
    Disabled: boolean;
    Completed: boolean;
    CompletedStatusName: string[];
    MaxCount: number;
    salesChannelSelector: string[];
    profileSelection: string[];
    additionalVisitData: string;
    catalogToUse: string;
    oneTimeStep: boolean;
}

export interface Group {
    Title: string;
    Steps: Step[];
}

export interface Visit {
    Key: string;
    Title: string;
    Groups: Group[];
    Active: boolean;
    divisionSelector: string;
    companySelector: string;
}

export interface SelectedStep {
    GroupIndex: number;
    StepIndex: number;
}

export interface RootObject {
    AccountUUID: string;
    Visits: Visit[];
}

export interface ClickObject {
    AccountUUID: string;
    Visit: Visit;
    SelectedStep: SelectedStep;
}

export interface Relation {
    catalogsExternalID: string[];
    transactionName: string;
}

export const DEBUG_ENABLED = true;
export const VISIT_FLOW_MAIN_ACTIVITY = 'VF_VisitFlowMainActivity';
export const VISIT_FLOW_AVAILABILIY_CHECK_NAME = 'Availability Check';

async function onVisitLoadScript(data: any) {
    //await client.alert("Yo", 'OnVisitFlowLoad');
    //await debug(JSON.stringify(data));
    const start = await enter('onVisitLoadScript');

    let visits: any[] = [];
    let accountUUID = '';

    // debug(data.data);
    //await debug(data.data.AccountUUID);

    if (data?.data && data.data.AccountUUID && data.data.Visits?.length) {
        accountUUID = data.data.AccountUUID;
        visits = data.data.Visits;

        const hasOpenVisitInAnotherAccount = await hasOpenVisitOnAnotherAccount(accountUUID);

        if (!hasOpenVisitInAnotherAccount) {
            // await client.alert("we dont have a visit on another account", "yay");
            let userProfile = 'PSR'; // TODO - assign this from the user
            let salesChannel = 'MT'; // TODO - assign this from the account

            const account = await pepperi.api.accounts.get({
                fields: ['TSASalesChannel', 'ExternalID'],
                key: { UUID: accountUUID },
            });

            if (account) {
                salesChannel = account.object.TSASalesChannel;
            }
            // if (!salesChannel) {
            //     salesChannel = 'MT';
            // }

            let userInfo: any = undefined;

            try {
                // await client.alert('main', 'before filterVisits');
                const user: User = await pepperi.environment.user();
                const userUUID = user.uuid; // await getUserUUID(accountUUID);
                userInfo = await pepperi.resources.resource('UserInfo').key(userUUID).get();
            } catch (error: any) {
                debug(error.message);
                // throw new Error(error.message);
            }

            if (userInfo) {
                const division = userInfo.division;
                const company = userInfo.company;
                const profile = userInfo.profile;

                visits = await filterVisits(visits, company, division);

                await filterProfileAndSalesChannel(visits, profile, salesChannel);

                await duplicateSteps(visits, profile, division);

                await filterByFrequency(visits, accountUUID);

                await filterOneTimeSteps(visits, account.object?.ExternalID);

                await filterBaseActivities(visits);
                await markDisabled(visits);
            } else {
                const emptyVisit: Visit = {
                    Title: 'Cannot Find User Info',
                    Groups: [{ Title: 'Cannot Find User Info', Steps: [] }],
                    Key: '',
                    Active: true,
                    divisionSelector: '',
                };

                visits = [emptyVisit];
            }
        } else {
            const emptyVisit: Visit = {
                Title: 'Another Visit In Progress',
                Groups: [{ Title: 'Another Visit In Progress', Steps: [] }],
                Key: '',
                Active: true,
                divisionSelector: '',
            };

            visits = [emptyVisit];
        }
    }

    const end = Date.now();
    console.log(`Execution time: ${end - start} ms`);

    return {
        Visits: visits,
    };

    async function hasOpenVisitOnAnotherAccount(accountUUID: string) {
        const start = await enter('hasOpenVisitOnAnotherAccount');

        const accountStr = accountUUID.replace(/-/g, '');
        const res = await pepperi.api.activities.search({
            fields: ['UUID', 'Type', 'StatusName', 'CreationDateTime', 'TSAFlowID', 'AccountName'],
            filter: {
                Operation: 'AND',
                LeftNode: { ApiName: 'CreationDateTime', FieldType: 'DateTime', Operation: 'Today', Values: [] },
                RightNode: {
                    Operation: 'AND',
                    LeftNode: { ApiName: 'AccountUUID', FieldType: 'String', Operation: 'IsNotEqual', Values: [accountStr] },
                    RightNode: {
                        Operation: 'AND',
                        LeftNode: { ApiName: 'AccountUUID', FieldType: 'String', Operation: 'IsNotEmpty', Values: [] },
                        RightNode: { ApiName: 'Type', FieldType: 'String', Operation: 'Contains', Values: [VISIT_FLOW_MAIN_ACTIVITY] },
                    },
                },
            },
            sorting: [{ Field: 'CreationDateTime', Ascending: false }],
            pageSize: 1,
        });

        let hasOpenVisit = false;
        if (res.objects?.length) {
            hasOpenVisit = res.objects[0]['StatusName'] !== 'Submitted';
            if (hasOpenVisit) {
                const accountName = res.objects[0].AccountName;
                await client.alert('Visit In Progress', 'Please finish visit on account ' + accountName);
            }
        }

        await exit(start, 'hasOpenVisitOnAnotherAccount');
        return hasOpenVisit;
    }

    async function filterVisits(visits: Visit[], company: string, division: string) {
        const start = await enter('filterVisits');
        if (company) {
            //filter visits by company
            // Eyal, uncomment when want to test filter by company!!!!
            //visits = visits.filter(visit => visit.companySelector === company);
        }
        if (division) {
            //filter visits by division
            visits = visits.filter((visit) => visit.divisionSelector === division);
        }
        await exit(start, 'filterVisits');
        return visits;
        //visits = visits.filter(visit => visit.Active === false);
    }

    async function filterProfileAndSalesChannel(visits: Visit[], profile: string, salesChannel: string) {
        const start = await enter('filterProfileAndSalesChannel');
        // if a step doesn't have the value of sales channel on salesChannelSelector field remove the step
        // if a step doesn't have the value of profile on profileSelection field remove the step
        for (let visit of visits) {
            for (let group of visit.Groups) {
                for (let i = group.Steps.length - 1; i >= 0; --i) {
                    let step = group.Steps[i];
                    //await debug(JSON.stringify(step));
                    if (group.Steps[i]?.profileSelection?.length) {
                        const item = group.Steps[i].profileSelection.find((p) => p === profile);
                        if (!item) {
                            group.Steps.splice(i, 1);
                        }
                    }
                    if (group.Steps[i]?.salesChannelSelector?.length) {
                        const item = group.Steps[i].salesChannelSelector.find((channel) => channel === salesChannel);
                        if (!item) {
                            group.Steps.splice(i, 1);
                        }
                    }
                }
            }
        }
        await exit(start, 'filterProfileAndSalesChannel');
    }

    async function duplicateSteps(visits: Visit[], userProfile: string, division: string) {
        const start = await enter('duplicateSteps');

        // debugger;

        if (visits.length === 0) {
            await exit(start, 'duplicateSteps');
            return;
        }

        // Create instances of the repositories
        const transactionsCatalogsRelationRepo = new TransactionsCatalogsRelationRepository();
        const catalogsRepo = new CatalogsRepository();

        // Get the relevant data from the repositories
        const [relations, relevantCatalogs] = await Promise.all([
            transactionsCatalogsRelationRepo.getAllRelations(),
            catalogsRepo.getRelevantCatalogs(userProfile, division),
        ]);

        // Helper function to duplicate steps
        const duplicateStep = (step: Step, catalog: string, overwriteTitle: boolean = true) => ({
            ...step,
            catalogToUse: catalog,
            ...(overwriteTitle && { Title: `${step.Title} - ${catalog}` }),
        });

        // Helper function to filter relevant relations and duplicate steps
        const processStep = (step: Step) => {
            if (step.Resource === 'transactions') {
                const relation = relations.find((obj) => obj.transactionName === step.ResourceCreationData);
                if (relation) {
                    const catalogs = relation.catalogsExternalID.filter((catalog) => relevantCatalogs.includes(catalog));
                    return catalogs.length === 1
                        ? [duplicateStep(step, catalogs[0], false)]
                        : catalogs.map((catalog) => duplicateStep(step, catalog));
                }
            }
            return [step];
        };

        // Process the steps for each group in each visit
        visits.forEach((visit) => {
            visit.Groups.forEach((group) => {
                group.Steps = group.Steps.flatMap(processStep);
            });
        });

        await exit(start, 'duplicateSteps');
    }

    /**
     * filter steps that were already created during the given period
     * currently supports types - days / weeks / months
     */
    async function filterByFrequency(visits: any[], accountUUID: string) {
        const start = await enter('filterByFrequency');
        // debugger;
        let promiseList: {
            iIndex: number;
            jIndex: number;
            hIndex: number; // should not be used
            promiseKey: string;
        }[] = [];

        // helper function
        const createStepKey = (step) => {
            return step.Title + '~' + step.ResourceCreationData
        }

        for (let i = 0; i < visits.length; i++) {
            for (let j = 0; j < visits[i].Groups.length; j++) {
                for (let h = 0; h < visits[i].Groups[j].Steps.length; h++) {
                    const step = visits[i].Groups[j].Steps[h];
                    //relevant only if no BaseActivity found and frequency params exist
                    if (
                        step?.BaseActivities?.length === 0 &&
                        step.frequencyType &&
                        step.frequencyType != 'None' &&
                        step.frequencyType != '' &&
                        step.frequencyValue &&
                        step.frequencyValue > 0
                    ) {
                        // await client.alert("Step", JSON.stringify(step));
                        const stepActivities: any = await getLastExecutedInstance(accountUUID, step);

                        if (stepActivities?.count >= step.frequencyValue) {
                            promiseList.push({
                                iIndex: i,
                                jIndex: j,
                                hIndex: h, // should not be used
                                promiseKey: createStepKey(step),
                            });
                        }
                    }
                }
            }
        }

        if (promiseList.length) {
            for (let i = 0; i < promiseList.length; i++) {
                const steps = visits[promiseList[i].iIndex].Groups[promiseList[i].jIndex].Steps;
                const correctIndex = steps.findIndex(el => createStepKey(el) === promiseList[i].promiseKey);
                if (correctIndex !== -1) {
                    console.log('removing step: ' + promiseList[i].promiseKey);
                    steps.splice(correctIndex, 1);
                }
                //visits[promiseList[i].iIndex].Groups[promiseList[i].jIndex].Steps.splice(promiseList[i].hIndex, 1);
            }
        }
        await exit(start, 'filterByFrequency');
    }

    /**
     * retrive a promise of the last instance
     */
    async function getLastExecutedInstance(accountUUID: string, step: any) {
        const start = await enter('getLastExecutedInstance');
        const resource = step.Resource;
        const resourceCreationData = step.ResourceCreationData;
        const frequencyType = step.frequencyType;
        const frequencyValue = step.frequencyValue.toString();

        // debugger

        let item: any | null = null;
        let res: any;
        //@ts-ignore
        const user: User = await pepperi.environment.user();
        const accountUUIDStr = accountUUID.replace(/-/g, '');
        const filterObj: any = {
            Operation: 'AND',
            LeftNode: {
                Operation: 'AND',
                LeftNode: { ApiName: 'CreationDateTime', FieldType: 'DateTime', Operation: 'ThisMonth', Values: [] },
                RightNode: { ApiName: 'Creator.UUID', FieldType: 'String', Operation: 'IsEqual', Values: [user.uuid] },
            },
            RightNode: {
                Operation: 'AND',
                LeftNode: { ApiName: 'AccountUUID', FieldType: 'String', Operation: 'Contains', Values: [accountUUIDStr] },
                RightNode: { ApiName: 'Type', FieldType: 'String', Operation: 'Contains', Values: [resourceCreationData] },
            },
        };

        const sorting = [{ Field: 'CreationDateTime', Ascending: false }];
        const fields = ['UUID', 'CreationDateTime', 'StatusName'];
        switch (resource) {
            case 'activities':
                res = await pepperi.api.activities.search({
                    fields: fields,
                    filter: filterObj,
                    sorting: sorting,
                    pageSize: 100,
                });
                if (res?.success && res.objects?.length) {
                    res.objects = res.objects.filter((act) => step.CompletedStatusName.includes(act.StatusName));
                    // update the count property after filtering
                    res.count = res.objects.length || 0;
                }
                break;
            case 'transactions':
                fields.push('CatalogExternalID');

                if (step.additionalVisitData && step.additionalVisitData != '') {
                    fields.push('TSAVisitData');
                }

                // if (step.ResourceCreationData === VISIT_FLOW_AVAILABILIY_CHECK_NAME) {
                //     fields.push('TSAVisitData');
                // }

                res = await pepperi.api.transactions.search({
                    fields: fields,
                    filter: filterObj,
                    sorting: sorting,
                    pageSize: 100,
                });

                // debugger
                if (res?.success && res.objects?.length) {
                    // filter the array by: Catalog, Completed && additional data
                    res.objects = res.objects.filter((transactionObj) => {
                        let filterRes = false;
                        if (transactionObj) {
                            const catalogExID = transactionObj.CatalogExternalID;
                            const tsaVisitData = !!transactionObj.TSAVisitData ? transactionObj.TSAVisitData : '';
                            const stepVisitData = !!step.additionalVisitData ? step.additionalVisitData : '';
                            if (
                                catalogExID == step.catalogToUse &&
                                tsaVisitData == stepVisitData &&
                                step.CompletedStatusName.includes(transactionObj.StatusName)
                            ) {
                                filterRes = true;
                            }
                        }
                        return filterRes;
                    });
                    // act.CatalogExternalID === step.catalogToUse &&
                    // act.TSAVisitData === step.additionalVisitData &&
                    // step.CompletedStatusName.includes(act.StatusName));
                    // update the count property after filtering
                    res.count = res.objects.length || 0;
                }
                break;
            default:
                const startTime = await getStartTime(frequencyType, frequencyValue);
                res = await pepperi.resources.resource(resource).search({
                    Fields: ['Key', 'StatusName', 'CreationDateTime', 'Account'],
                    Where: `Template='${resourceCreationData}' And Creator = '${user.uuid}' And Account='${accountUUID}' And CreationDateTime >= '${startTime}'`,
                });
                // update the count
                const relevantObjects = res.Objects.filter(el => step.CompletedStatusName?.includes(el.StatusName));
                res.count = relevantObjects.length || 0;
                break;
        }
        console.log(`found ${res.count} existing objects for ${resourceCreationData}. frequencyValue: ${frequencyValue}, frequencyType: ${frequencyType}. Mandatory: ${step.Mandatory}`);
        // console.log(res);
        await exit(start, 'getLastExecutedInstance');
        return res;
    }

    async function getStartTime(frequencyType, frequencyValue) {
        let dt = new Date();
        dt.setUTCHours(0, 0, 0, 0);

        switch (frequencyType) {
            case 'Month':
                dt.setDate(1);
                break;
            case 'Week':
                dt.setDate(dt.getDate() - frequencyValue * 7);
                break;
            case 'Day':
                dt.setDate(dt.getDate() - frequencyValue);
                break;
        }

        let dateStr = dt.toISOString();
        return dateStr;
    }

    /*
    This function should filter the base activities for steps that are transactions.
    if the transaction catalog && initialize Data is equal to the values on the step, 
    it should remain in the base activities, otherwise remove it.
     
    */
    async function filterBaseActivities(visits: Visit[]) {
        const start = await enter('filterBaseActivities');
        for (const visit of visits) {
            let inProgress = visit.Groups[0]?.Steps[0]?.Completed;
            if (inProgress) {
                for (const group of visit.Groups) {
                    for (const step of group.Steps) {
                        switch (step.Resource) {
                            case 'activities': {
                                {
                                    const activityObjects = await Promise.all(
                                        step.BaseActivities.map(async (activityUUID) => {
                                            let activityObj:
                                                | {
                                                    UUID: string;
                                                    StatusName: string;
                                                    TSAVisitData?: string;
                                                }
                                                | undefined;
                                            if (activityUUID) {
                                                let fields: string[] = ['StatusName'];
                                                activityObj = {
                                                    UUID: activityUUID,
                                                    ...(await getActivity(activityUUID, fields)).object,
                                                } as any;
                                            }
                                            return activityObj;
                                        })
                                    );

                                    step.Completed =
                                        activityObjects.find((obj) => step.CompletedStatusName.some((e) => e === obj?.StatusName)) != undefined;
                                    step.Disabled = step.MaxCount
                                        ? activityObjects.length >= step.MaxCount && step.Completed
                                        : step.ResourceCreationData === VISIT_FLOW_MAIN_ACTIVITY && step.Completed;
                                }
                                break;
                            }
                            case 'transactions': {
                                {
                                    const transactionObjects = await Promise.all(
                                        step.BaseActivities.map(async (transactionUUID) => {
                                            let transactionObj:
                                                | {
                                                    UUID: string;
                                                    CatalogExternalID: string;
                                                    StatusName: string;
                                                    TSAVisitData?: string;
                                                }
                                                | undefined;
                                            if (transactionUUID) {
                                                let fields: string[] = ['CatalogExternalID', 'StatusName'];
                                                // if (step.ResourceCreationData === 'AvailabilityCheck') {
                                                // if (step.ResourceCreationData === VISIT_FLOW_AVAILABILIY_CHECK_NAME) {
                                                //     fields.push('TSAVisitData');
                                                // }

                                                if (step.additionalVisitData && step.additionalVisitData != '') {
                                                    fields.push('TSAVisitData');
                                                }

                                                transactionObj = {
                                                    UUID: transactionUUID,
                                                    ...(await getTransaction(transactionUUID, fields)).object,
                                                } as any;
                                            }
                                            //await client.alert("****** transactionObj ******", JSON.stringify(transactionObj));
                                            return transactionObj;
                                        })
                                    );

                                    const stepTransactions = transactionObjects.filter((transactionObj) => {
                                        let res = false;
                                        if (transactionObj) {
                                            const catalogExID = transactionObj.CatalogExternalID;
                                            const tsaVisitData = !!transactionObj.TSAVisitData ? transactionObj.TSAVisitData : '';
                                            const stepVisitData = !!step.additionalVisitData ? step.additionalVisitData : '';
                                            if (catalogExID == step.catalogToUse && tsaVisitData == stepVisitData) {
                                                res = true;
                                            }
                                        }
                                        return res;
                                    });

                                    step.BaseActivities = stepTransactions.map((obj) => obj!.UUID);
                                    //await client.alert("****** BaseActivities ******", JSON.stringify(step.BaseActivities));
                                    step.Completed =
                                        stepTransactions.find((obj) => step.CompletedStatusName.some((e) => e === obj?.StatusName)) != undefined;
                                    step.Disabled = step.MaxCount ? stepTransactions.length >= step.MaxCount && step.Completed : false;
                                }
                                break;
                            }
                            default: {
                                {
                                    const surveyObjects = await Promise.all(
                                        step.BaseActivities.map(async (surveyUUID) => {
                                            let surveyObj:
                                                | {
                                                    UUID: string;
                                                    StatusName: string;
                                                    TSAVisitData?: string;
                                                }
                                                | undefined;
                                            if (surveyUUID) {
                                                surveyObj = {
                                                    UUID: surveyUUID,
                                                    ...(await getSurvey(step.Resource, surveyUUID)).Objects[0],
                                                } as any;
                                            }
                                            return surveyObj;
                                        })
                                    );

                                    step.Completed =
                                        surveyObjects.find((obj) => step.CompletedStatusName.some((e) => e === obj?.StatusName)) != undefined;
                                    step.Disabled = step.MaxCount ? surveyObjects.length >= step.MaxCount && step.Completed : false;
                                }
                                break;
                            }
                        }
                    }
                }
            }
        }
        await exit(start, 'filterBaseActivities');
    }

    /*
    Should filter steps based on oneTimeStep checkbox, if it is true, than step can be done only one time
    */
    async function filterOneTimeSteps(visits: any[], accountExternalID: string) {
        debug('Enter filterOneTimeSteps');
        const markedStepsList: {
            iIndex: number;
            jIndex: number;
            hIndex: number;
            promiseKey: string;
        }[] = [];

        // helper function
        const createStepKey = (step) => {
            return step.Title + '~' + step.ResourceCreationData
        }

        let currentVisitUUID: string;
        // loop through all steps to find out if this filtering is needed
        for (let i = 0; i < visits.length; i++) {
            for (let j = 0; j < visits[i].Groups.length; j++) {
                for (let h = 0; h < visits[i].Groups[j].Steps.length; h++) {
                    const step = visits[i].Groups[j].Steps[h];
                    //relevant only if no BaseActivity found and frequency params exist
                    if (step?.BaseActivities?.length === 0 && !!step?.oneTimeStep) {
                        markedStepsList.push({
                            iIndex: i,
                            jIndex: j,
                            hIndex: h,
                            promiseKey: createStepKey(step)
                        });
                    }
                    // find current visitflow uuid, it is empty before starting the visit
                    if (step.ResourceCreationData === VISIT_FLOW_MAIN_ACTIVITY && step.BaseActivities.length) {
                        {
                            currentVisitUUID = step.BaseActivities[0];
                        }
                    }
                }
            }
        }
        //debug('markedStepsList: ' + JSON.stringify(markedStepsList));
        if (markedStepsList.length) {
            // filtering is needed, check udt and filter
            const udtRecords = await getOneTimeVisitStepUDT(accountExternalID);
            for (let listRecord of markedStepsList) {
                const steps = visits[listRecord.iIndex].Groups[listRecord.jIndex].Steps;
                const correctIndex = steps.findIndex(el => createStepKey(el) === listRecord.promiseKey);

                const step = steps[correctIndex];

                const relevantUdtRecords = udtRecords.filter((el) => el.secondaryKey?.includes(step?.Title));
                for (let record of relevantUdtRecords) {
                    // skip do not remove step if it is completed but in same visit
                    if (record.secondaryKey === `${currentVisitUUID}@${step.Title}`) {
                        debug(`step '${step.Title}' was found in UDT for current visit`);
                        continue;
                    }
                    // otherwise remove this step
                    debug(`removing step with title ${step.Title} as it was found in UDT`);

                    steps.splice(correctIndex, 1);

                    //visits[listRecord.iIndex].Groups[listRecord.jIndex].Steps.splice(listRecord.hIndex, 1);
                }
            }
        }
        debug('Exit filterOneTimeSteps');
    }

    // This will make all the activities after a mandatory activity as disabled
    // includes the End activity step
    async function markDisabled(visits: Visit[]) {
        const start = await enter('markDisabled');
        for (let visit of visits) {
            let inProgress = visit.Groups[0]?.Steps[0]?.BaseActivities?.length > 0;
            if (inProgress) {
                let foundMandatory = false;
                for (let group of visit.Groups) {
                    for (let step of group.Steps) {
                        if (foundMandatory) {
                            step.Disabled = true;
                        } else if (!step.Completed && step.Mandatory) {
                            foundMandatory = true;
                        }
                    }
                }
            }
        }
        await exit(start, 'markDisabled');
    }

    async function getTransaction(key: string, fields: string[]) {
        await debug('getTransactionֿ' + JSON.stringify(fields));
        return await pepperi.api.transactions.get({
            fields: fields,
            key: { UUID: key },
        });
    }

    async function getActivity(key: string, fields: string[]) {
        await debug('getActivity' + JSON.stringify(fields));
        return await pepperi.api.activities.get({
            fields: fields,
            key: { UUID: key },
        });
    }

    async function getUserUUID(accountUUID) {
        let userUUID = '';
        let resource = await pepperi.app.activities.add({
            type: {
                Name: 'Test Activity',
            },
            references: {
                account: {
                    UUID: accountUUID,
                },
            },
        });

        if (resource.status === 'added') {
            const fields = ['CreatorUUID'];
            userUUID = await (await getActivity(resource.id, fields)).object.CreatorUUID;
            // await pepperi.app.activities.update([{ UUID: resource.id, Hidden: true }],
        }
        return userUUID;
    }

    async function getSurvey(resource: string, key: string) {
        // return await pepperi.resources.resource(resource).key(key).get() as any;

        const res = await pepperi.resources.resource(resource).search({
            Fields: ['Key', 'StatusName'],
            Where: `Key='${key}'`,
        });
        return res as any;
    }
}

async function debug(message: string) {
    // if (DEBUG_ENABLED) {
    //await client.alert("debug", message);
    console.log(message);
    // }
}

async function enter(message: string) {
    console.log(`Enter ${message}`);
    return Date.now();
}

async function exit(start: number, message: string) {
    const end = Date.now();
    console.log(`Exit ${message}. ### Execution time: ${end - start} ms ###`);
}

async function getOneTimeVisitStepUDT(accountExternalID) {
    const udt = await pepperi.api.userDefinedTables.getList({
        table: 'OneTimeVisitStep',
        mainKey: accountExternalID,
    });
    return udt.objects || [];
}

// Create a TransactionsCatalogsRelationRepository
class TransactionsCatalogsRelationRepository {
    async getAllRelations(): Promise<Relation[]> {
        const response = await pepperi.resources.resource('TransactionsCatalogsRelation').search({
            Fields: ['catalogsExternalID', 'transactionName'],
        });
        return response?.Objects || [];
    }
}

// Create a CatalogsRepository
class CatalogsRepository {
    async getRelevantCatalogs(profile: string, division: string): Promise<string[]> {
        const response = await pepperi.resources.resource('catalogs').search({
            Fields: ['ExternalID', 'TSAProfiles'],
            Where: `TSADivisionCode like '%${division}%' AND IsActive=true`,
        });
        console.log(`@catalogs returned ${response.Objects.length} records`);
        const relevantCatalogs = response.Objects?.filter((catalog) => {
            try {
                const profiles = JSON.parse(catalog['TSAProfiles'] || '[]');
                return profiles.includes(profile);
            } catch (e) {
                return false;
            }
        });
        console.log(`@catalogs filtered ${relevantCatalogs.length} records`);
        return relevantCatalogs?.map((obj) => obj.ExternalID) || [];
    }
}

export async function main(data) {
    return await onVisitLoadScript(data);
}
